import numpy as np
## exercice 1

#question 1

def estPremier(n):                #Création de la fonction
    y=True                        #initialisation de la variable y à "True"
    for k in range(2,n):          #Création d'une boucle for allant de 2 à n-1
        if n%k==0 and n%1==0:     # On teste chaque entier entre 2 et n: si le reste de la divison euclidienne de n par k est nul (c'est à dire que k divise n et que 1 divise n),
            y=False               #alors n n'est pas premier et y prend la valeur "False"
            break
    return(y)                     #Ce programme permet à l'utilisateur de savoir si le nombre n qu'il a rentré est premier ou non


#question 2

def petitsPremiers(n):           #Création de la fonction
    L=[]                         #Création d'une liste vide
    for k in range(2,n+1):       #Pour chaque entier k allant de 2 à n, on teste si k est premier. 
        if estPremier(k)==True:  #Si celui est premier, 
            L.append(k)          #il est ajouté à la liste L
    return(L,len(L))             #Ce programme renvoie donc pour un entier n donné, la liste des nombres premiers compris entre 2 et n

#question 3

def petitsPremiers2(n):              #Création de la fonction
    L=[]                             #Création d'une liste vide
    for k in range(3,int(sqrt(n))):  #Grâce à cette boucle on fait varier k de 3 à la partie entière de racine de n
        if estPremier(k)==True:      #Pour chaque entier k on teste si il est premier
            L.append(k)              #Si k est premier, on l'ajoute à la liste
    return(L,len(L))                 #Ce programme renvoie pour un entier n donné la liste des nombres premiers compris entre 3 et racine de n ainsi que leur nombre

#question 4

def petitsPremiers3(n):
    l = []
    for i in range(2,n+1):
        if len(l) == 0:
            l.append(i)
        else:
            t = True
            for k in l:
                if i % k == 0:
                    t = False
            if t == True:
                l.append(i)
    return l


#question 5

def factoriser(n):
    l=[]
    L=[]
    k=2
    while k<=n:
        y=True
        for i in range(2,int(k**0.5)+1):
            if k%i==0:
                y = False
                break
        if y==True :
            l.append(k)
        k+=1
    for i in range(len(l)):
        k=n
        while k%l[i]==0:
            L.append(l[i])
            k=k/l[i]
    return(L)

#question 6

def factoriser2(n):
    L=[]
    l=[2,3]
    for i in range(2,int(n**0.5)):
        y=True
        for s in range(len(l)):
            if (2*i+1)%l[s]==0:
                y=False
                break
        if y==True:
            l.append(2*i+1)
    for i in range(len(l)):
        k=n
        while k%l[i]==0:
            L.append(l[i])
            k=k/l[i]
    return(L,len(L))

#question 7

def calculerAlpha(n):
    L=[]
    NB=[]
    l=[2,3]
    for i in range(2,int(n**0.5)):
        y=True
        for s in range(len(l)):
            if (2*i+1)%l[s]==0:
                y=False
                break
        if y==True:
            l.append(2*i+1)
    for i in range(len(l)):
        k=n
        nb=0
        if k%l[i]==0:
            while k%l[i]==0:
                L.append(l[i])
                k=k/l[i]
                nb+=1
            NB.append(nb)
    return(NB, len(NB))

#question 8:
def estPuissance(n,b): #n>=2, b>=1
    a = 0
    for k in range (n+1):
        if n==a**b:
            print(a)
            return True
        a+=1
    return False


##exercice 2:

#question 9:

def pointsToVect(A,B):
    return(np.array([B[0]-A[0],B[1]-A[1]]))
#question 10:
def prodScal(u,v):
    return(np.dot(u,v))
#question 11:
def norme(a):
    return(np.linalg.norm(a))
#question 12:
def pente(a):
    return(a[1]/a[0])
#question 13:
def longueurs(l):
    L=[]
    for k in range(0,len(l)-1):
        L.append(norme(pointsToVect(l[k],l[k+1])))
    L.append(norme(pointsToVect(l[0],l[-1])))
    return(L)
#question 14:
def trianglesSembalbles(A,B):
    l=longueurs(A)
    L=longueurs(B)
    for i in range(3):
        if l[i]!=L[i]:
            return(False)
    return(True)
#question 15:
def estPermutation(L,M):
    for i in range(len(L)):
        if L[i]!=M[-i-1]:
            return(False)
    return(True)
#question 16:
def memesTriangles(A,B):
    if estPermutation(A,B)==True and trianglesSembalbles(A,B)==True:
        return(True)
    else:
        return(False)
